swagger: "2.0"
info:
  version: "1.0.0"
  title: ComidAppAPI

host: localhost:10010

x-google-endpoints:
- name: 'localhost:10010'
  allowCors: 'true'

basePath: /

schemes:
  - http
  - https
  
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json
paths:

  /login/{role}:
    x-swagger-router-controller: login.controller
    
    post:
      operationId: login
      description: Login with a particular role
      parameters:
        - name: role
          in: path
          required: true
          type: string
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /user:
    x-swagger-router-controller: user.controller
    
    get:
      operationId: getUsers
      description: Find all 
      parameters:
        - name: role
          in: query
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserList"
        default:
          description: Error
          schema: 
            $ref: "#/definitions/ErrorResponse"
    
    post:
      operationId: postUser
      description: Create 
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /user/{id}:
    x-swagger-router-controller: user.controller
    
    get:
      operationId: getUserById
      description: Find by id
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/UserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      operationId: putUser
      description: Update 
      parameters:
        - name: id
          type: string
          in: path
          required: true
        - name: user
          in: body
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    
    delete:
      operationId: delUser
      description: Delete
      parameters:
        - name: id
          in: path 
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DelResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /store:
    x-swagger-router-controller: store.controller
    
    get:
      operationId: getStores
      description: Find all
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/StoreList"
        default:
          description: Error
          schema: 
            $ref: "#/definitions/ErrorResponse"
    
    post:
      operationId: postStore
      description: Create
      parameters:
        - name: store
          in: body
          required: true
          schema:
            $ref: "#/definitions/Store"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/StoreResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /store/{id}:
    x-swagger-router-controller: store.controller
    
    get:
      operationId: getStoreById
      description: Find by id
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/StoreResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      operationId: putStore
      description: Update 
      parameters:
        - name: id
          type: string
          in: path
          required: true
        - name: store
          in: body
          schema:
            $ref: "#/definitions/Store"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/StoreResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    
    delete:
      operationId: delStore
      description: Delete
      parameters:
        - name: id
          in: path 
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DelResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /food:
    x-swagger-router-controller: food.controller
    
    get:
      operationId: getFoods
      description: Find all
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/FoodList"
        default:
          description: Error
          schema: 
            $ref: "#/definitions/ErrorResponse"
    
    post:
      operationId: postFood
      description: Create
      parameters:
        - name: food
          in: body
          required: true
          schema:
            $ref: "#/definitions/Food"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/FoodResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /food/{id}:
    x-swagger-router-controller: food.controller
    
    get:
      operationId: getFoodById
      description: Find by id
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/FoodResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      operationId: putFood
      description: Update 
      parameters:
        - name: id
          type: string
          in: path
          required: true
        - name: food
          in: body
          schema:
            $ref: "#/definitions/Food"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/FoodResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    
    delete:
      operationId: delFood
      description: Delete
      parameters:
        - name: id
          in: path 
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DelResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /cart:
    x-swagger-router-controller: cart.controller
    
    get:
      operationId: getCarts
      description: Find all
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CartList"
        default:
          description: Error
          schema: 
            $ref: "#/definitions/ErrorResponse"
    
    post:
      operationId: postCart
      description: Create
      parameters:
        - name: cart
          in: body
          required: true
          schema:
            $ref: "#/definitions/Cart"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CartResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /cart/{id}:
    x-swagger-router-controller: cart.controller
    
    get:
      operationId: getCartById
      description: Find by id
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/CartResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    
    delete:
      operationId: delCart
      description: Delete
      parameters:
        - name: id
          in: path 
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DelResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  
  /swagger:
    x-swagger-pipe: swagger_raw

definitions:

# Generic responses

  DelResponse:
    type: object
    properties:
      success:
        type: number
        description: Returns 1 if successful
      description:
        type: string
        description: A short comment
    required:
      - success
      - description
      
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string

# Login objects

  Authentication:
    type: object
    properties:
      username:
        type: string
      password:
        type: string

  Token:
    type: object
    properties:
      token: 
        type: string

# User objects

  User:
    type: object
    properties:
      username: 
        type: string
      password:
        type: string
      role: 
        type: string
      city:
        type: string
      address:
        type: string
      cp:
        type: string
    required:
      - username
      - password
      - role
      - city
      - address
      - cp
  
  UserResponse:
    type: object
    properties:
      id:
        type: number
      username: 
        type: string
      role: 
        type: string
      city:
        type: string
      address:
        type: string
      cp:
        type: string
    required:
      - id
      - username
      - role
      - city
      - address
      - cp
  
  UserList:
    properties:
      users:
        type: array
        items:
          $ref: "#/definitions/UserResponse"
      
# Store objects

  Store:
    type: object
    properties:
      name:
        type: string
      rfc: 
       type: string
       description: Registro Federal de Contribuyentes
      address: 
        type: string
      phone: 
        type: string
    required:
      - name
      - rfc
      - address
      - phone
      
  StoreResponse:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
      rfc: 
       type: string
       description: Registro Federal de Contribuyentes
      address: 
        type: string
      phone: 
        type: string
    required:
      - id
      - name
      - rfc
      - address
      - phone
  
  StoreList:
    type: object
    properties:
      stores:
        type: array
        items: 
          $ref: "#/definitions/StoreResponse" 
      
# Food objects
  
  Food:
    type: object
    properties:
      name: 
        type: string
      description:
        type: string
      quantity: 
        type: number
      price:
        type: number
        format: double
      StoreId: 
        type: number
        description: Vendedor
    required:
      - name
      - description
      - quantity
      - price
      - StoreId
      
  FoodResponse:
    type: object
    properties:
      id:
        type: number
      name: 
        type: string
      description:
        type: string
      quantity: 
        type: number
      price:
        type: number
        format: double
      StoreId: 
        type: number
        description: Vendedor
    required:
      - id
      - name
      - description
      - quantity
      - price
      - StoreId
      
  FoodList:
    type: object
    properties:
      foods:
        type: array
        items:
          $ref: "#/definitions/FoodResponse"
      
# Cart objects

  Cart:
    type: object
    properties:
      UserId: 
        type: number
        description: Comprador
      items:
        type: array
        items: 
          type: string
      total:
        type: number
        format: double
      date:
        type: string
        format: date-time
        example: 2017-07-21T17:32:28Z
    required:
     - UserId
     - items
     - total
     - date
     
  CartResponse:
    type: object
    properties:
      id:
        type: number
      UserId: 
        type: number
        description: Comprador
      items:
        type: array
        items: 
          type: string
      total:
        type: number
        format: double
      date:
        type: string
        format: date-time
        example: 2017-07-21T17:32:28Z
    required:
     - id
     - UserId
     - items
     - total
     - date
  
  CartList:
    type: object
    properties:
      carts:
        type: array
        items:
          $ref: "#/definitions/CartResponse"
